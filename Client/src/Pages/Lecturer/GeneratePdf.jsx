import React, { useState, useEffect } from "react";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { FaFilePdf } from "react-icons/fa";
import SyncLoader from "react-spinners/ClipLoader";
import { backendUrl } from "../../../config";

const override = {
    display: "block",
    margin: "0 auto",
    borderColor: "red",
  };

const GeneratePdf = ({ contest }) => {
  const [students, setStudents] = useState([]);
    const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    const fetchStudents = async () => {
      try {
        const response = await fetch(`${backendUrl}/api/enrollment/contest/${contest._id}/enrolled-students-grades`);
        const data = await response.json();
        setStudents(data.studentsWithGrades);
        
      } catch (error) {
        toast.error("Error fetching students with grades:", error);
      }
      finally {
        setLoading(false);
      }
    };

    fetchStudents();
  }, [contest._id]);

  const formatDuration = (minutes) => {
    const days = Math.floor(minutes / (24 * 60));
    const hours = Math.floor((minutes % (24 * 60)) / 60);
    const mins = minutes % 60;

    let durationString = "";

    if (days > 0) {
      durationString += `${days}d `;
    }

    if (hours > 0 || days > 0) {
      durationString += `${hours}h `;
    }

    if (mins > 0 || (hours === 0 && days === 0)) {
      durationString += `${mins}m`;
    }

    return durationString.trim();
  };

  const handleGeneratePdfClick = () => {
    if (!students) {
      toast.error("No students enrolled in this contest");
      return;
    }

    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("Contest Details", 10, 10);

    doc.setFontSize(12);
    doc.text(`Contest Name: ${contest.name}`, 10, 30);
    doc.text(`Start Date: ${new Date(contest.startDate).toLocaleString([], { month: "2-digit", day: "2-digit", year: "numeric", hour: "numeric", minute: "2-digit", hour12: true })}`, 10, 40);
    doc.text(`End Date: ${new Date(contest.endDate).toLocaleString([], { month: "2-digit", day: "2-digit", year: "numeric", hour: "numeric", minute: "2-digit", hour12: true })}`, 140, 40);
    doc.text(`Duration: ${formatDuration(contest.duration)}`, 140, 50);

    doc.setFontSize(12);
    doc.text("Enrolled Students and Grades", 10, 70);

    // Create table
    doc.autoTable({
      startY: 80,
      head: [["Name", "Reg no" ,"Grade"]],
      body: students.map((student) => [student.username, student.regNo,parseFloat(student.totalGrade).toFixed(2)]),
    });

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by Contest Management System", 10, doc.autoTable.previous.finalY + 10);

    doc.save(`${contest.name}.pdf`);
  };

  return (
    loading ?  (
        <div className="fixed inset-0 bg-gray-100 opacity-50 flex justify-center items-center">
        <SyncLoader color="red" loading={true} size={120} css={override} />
      </div>
     
      ) :
        (<button
      className="bg-blue-500 hover:bg-blue-600 text-white font-semibold px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 flex items-center"
      onClick={handleGeneratePdfClick}
    >
      <FaFilePdf className="mr-2" /> Generate PDF
    </button>)

    
  );
};

export default GeneratePdf;
